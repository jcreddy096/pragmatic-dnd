{
  "version": 3,
  "sources": ["../../@atlaskit/pragmatic-drag-and-drop/dist/esm/util/is-safari-on-ios.js", "../../@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/element/custom-native-drag-preview/center-under-pointer.js", "../../@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/element/custom-native-drag-preview/pointer-outside-of-preview.js"],
  "sourcesContent": ["import { once } from '../public-utils/once';\nimport { isSafari } from './is-safari';\n\n// Using `once` as the value won't change in a browser\n\n/**\n * **Notes**\n *\n * All browsers on iOS (Safari, Chrome, Firefox) use the same rendering engine (Safari / Webkit).\n *\n * â†’ https://developer.apple.com/app-store/review/guidelines/ (see 2.5.6)\n *\n * There is some ongoing change in this space, and we might see some new browser\n * engines soon on iOS (at least in Europe)\n *\n * â†’ https://developer.apple.com/support/alternative-browser-engines/\n **/\n\n/**\n * Returns `true` if browser is Safari (WebKit) on iOS.\n */\nexport var isSafariOnIOS = once(function isSafariOnIOS() {\n  if (process.env.NODE_ENV === 'test') {\n    return false;\n  }\n  return isSafari() && 'ontouchend' in document;\n});", "export var centerUnderPointer = function centerUnderPointer(_ref) {\n  var container = _ref.container;\n  var rect = container.getBoundingClientRect();\n  return {\n    x: rect.width / 2,\n    y: rect.height / 2\n  };\n};", "import { isAndroid } from '../../../util/android';\nimport { isSafariOnIOS } from '../../../util/is-safari-on-ios';\nimport { centerUnderPointer } from './center-under-pointer';\n\n/** Any valid CSS string value\n * @example `calc(var(--grid) * 2)\n */\n\n/**\n * Position the native drag preview **in front** of the users pointer.\n *\n * **Distance**\n *\n * If the total width of your preview (including the offset applied by this function)\n * exceeds `280px` then the drag preview will have more opacity applied on Windows.\n *\n * https://atlassian.design/components/pragmatic-drag-and-drop/web-platform-design-constraints\n *\n * **Direction**\n *\n * This function will position the drag preview on the _right hand side for left to right (`ltr`) interfaces_, and on the _left hand side for right to left (`rtl`) languages_.\n *\n * The direction will be calculated based on the direction (`dir`) being applied to the `container`\n * element (which will be a child of the `body` element).\n *\n * **iOS, iPadOS and Android**\n *\n * The drag preview will be centered under the users pointer rather than\n * pushed away on iOS due to platform limitations.\n */\nexport function pointerOutsideOfPreview(point) {\n  return function getOffset(_ref) {\n    var container = _ref.container;\n    /**\n     * **Approach: transparent borders.**\n     *\n     * The only reliable cross browser technique found to push a\n     * drag preview away from the cursor is to use transparent borders on the container.\n     *\n     * **ðŸ™…ðŸ“± Not pushing the preview away on touch devices**\n     *\n     * _On iOS_\n     *\n     * Safari will set the transparent border color to be black\n     *\n     * `iOS@18.4.1` on May 7th 2025:\n     * - If you set the background color on the `container` the border color will be that\n     * - Setting a transparent background color on the `container` still results in a\n     *   black border\n     * - The `<body>` text or background color does not change the black border color\n     *\n     * While dragging, the drag preview will shift under the center of the users pointer.\n     * So if you start at {x: 0, y: 0} (top left), almost immediately the preview will move\n     * to be under the middle of the users pointer.\n     *\n     * _On Android_\n     *\n     * Chrome will put the center of the drag preview under the users pointer immediately.\n     *\n     * Tested on `Chrome@137` on `Android 14` on June 20th 2025\n     *\n     * _What we do_\n     *\n     * We don't add the transparent border\n     *\n     * - Avoid the black color on iOS\n     * - It isn't needed on Android anyway as the preview will be under the center\n     *   of the users pointer\n     *\n     * We put the center of the drag preview under the users pointer\n     *\n     * - Avoids the drag preview quickly moving from a top corner to be centered under\n     *   the users pointer on iOS\n     * - It will be under the center on Android no matter what we do\n     *\n     * We previously had a isTouchDevice() check, but it felt safer for now\n     * to have a more targeted check, as these are the devices that have been\n     * tested on.\n     */\n    if (isSafariOnIOS() || isAndroid()) {\n      return centerUnderPointer({\n        container: container\n      });\n    }\n    Object.assign(container.style, {\n      borderInlineStart: \"\".concat(point.x, \" solid transparent\"),\n      borderTop: \"\".concat(point.y, \" solid transparent\")\n    });\n\n    // Unfortunate that we need to use `getComputedStyle`,\n    // but it's only a single call when the drag is starting.\n    var computed = window.getComputedStyle(container);\n    if (computed.direction === 'rtl') {\n      // The DOMRect will include the new border we added\n      var box = container.getBoundingClientRect();\n\n      // Use the top right corner (including the new border) as the offset.\n      // The border will push the preview away from the pointer.\n      return {\n        x: box.width,\n        y: 0\n      };\n    }\n\n    // Use the top left corner as the offset. The border will\n    // push the preview away from the pointer.\n    return {\n      x: 0,\n      y: 0\n    };\n  };\n}"],
  "mappings": ";;;;;;;;AAqBO,IAAI,gBAAgB,KAAK,SAASA,iBAAgB;AACvD,MAAI,OAAiC;AACnC,WAAO;AAAA,EACT;AACA,SAAO,SAAS,KAAK,gBAAgB;AACvC,CAAC;;;AC1BM,IAAI,qBAAqB,SAASC,oBAAmB,MAAM;AAChE,MAAI,YAAY,KAAK;AACrB,MAAI,OAAO,UAAU,sBAAsB;AAC3C,SAAO;AAAA,IACL,GAAG,KAAK,QAAQ;AAAA,IAChB,GAAG,KAAK,SAAS;AAAA,EACnB;AACF;;;ACuBO,SAAS,wBAAwB,OAAO;AAC7C,SAAO,SAAS,UAAU,MAAM;AAC9B,QAAI,YAAY,KAAK;AA+CrB,QAAI,cAAc,KAAK,UAAU,GAAG;AAClC,aAAO,mBAAmB;AAAA,QACxB;AAAA,MACF,CAAC;AAAA,IACH;AACA,WAAO,OAAO,UAAU,OAAO;AAAA,MAC7B,mBAAmB,GAAG,OAAO,MAAM,GAAG,oBAAoB;AAAA,MAC1D,WAAW,GAAG,OAAO,MAAM,GAAG,oBAAoB;AAAA,IACpD,CAAC;AAID,QAAI,WAAW,OAAO,iBAAiB,SAAS;AAChD,QAAI,SAAS,cAAc,OAAO;AAEhC,UAAI,MAAM,UAAU,sBAAsB;AAI1C,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP,GAAG;AAAA,MACL;AAAA,IACF;AAIA,WAAO;AAAA,MACL,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AACF;",
  "names": ["isSafariOnIOS", "centerUnderPointer"]
}
